        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Jos√©-Antonio D. Rubio
        -:    2://CS 362-400
        -:    3://randomtestadventure.c
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <assert.h>
        -:   11:#include "rngs.h"
        -:   12:#include <time.h> 
        -:   13:#include <math.h>
        -:   14:
        -:   15:#define NUM_SECS 15
        -:   16:// #define MAX_ITERATIONS 10
        -:   17:// void delay(void); // function declaration
        -:   18:
function checkVillage called 500 returned 100% blocks executed 71%
      500:   19:int checkVillage(int p, struct gameState *post) {
        -:   20:  int r, i;
      500:   21:  int bonus = 0, handPos=0;
        -:   22:
        -:   23:  struct gameState pre;
      500:   24:  memcpy (&pre, post, sizeof(struct gameState));
        -:   25: 
     2500:   26: for (i=0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     2000:   27:  post->whoseTurn=i;
     2000:   28:  r = cardEffect(village, 0, 0, 0, post, 0, &bonus); 
call    0 returned 100%
        -:   29:
        -:   30:
        -:   31:      //+1 Card
     2000:   32:      drawCard(p, &pre);
call    0 returned 100%
        -:   33: 
        -:   34:      //+2 Actions
     2000:   35:      pre.numActions = pre.numActions + 2;
        -:   36:
        -:   37:    //discard card from hand
     2000:   38:    discardCard(handPos, p, &pre, 0);
call    0 returned 100%
        -:   39:  }
        -:   40:
        -:   41:     // printf("Pre Hand count: %d\n", pre.handCount[p]);
        -:   42:     //  printf("Post Hand count: %d\n", post->handCount[p]);
        -:   43: //printf("Pre numActions: %d\tPost numActions: %d\n",pre.numActions, post->numActions);
        -:   44:
        -:   45:
      500:   46:  if (pre.numActions < post->numActions) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      503:   47:    return 2;
      497:   48:  } else if (pre.numActions > post->numActions) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      497:   49:    return 1;
        -:   50:  } else {
        -:   51:
    #####:   52:    assert (r == 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   53:
    #####:   54:    if(memcmp(&pre, post, sizeof(struct gameState)) == 0) {
branch  0 never executed
branch  1 never executed
    #####:   55:         return 3;
        -:   56:    }
        -:   57:  }
    #####:   58:}
        -:   59:
function main called 1 returned 100% blocks executed 96%
        1:   60:int main () {
        -:   61:
        -:   62:  int result, r, p, deckCount, discardCount, handCount;
        1:   63:  int postFailure=0, preFailure=0, pass=0;
        -:   64:
        1:   65:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   66:               remodel, smithy, village, baron, great_hall};
        -:   67:
        -:   68:  struct gameState G;
        -:   69:
        1:   70:  printf ("RANDOM TEST FOR VILLAGE.\n");
call    0 returned 100%
        -:   71:
        -:   72:
        1:   73:  SelectStream(2);
call    0 returned 100%
        1:   74:  PutSeed(3);
call    0 returned 100%
        -:   75:
        -:   76:
        5:   77:  for (p = 0; p < 4; p++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       24:   78:    for (deckCount = 0; deckCount < 5; deckCount++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      120:   79:      for (discardCount = 0; discardCount < 5; discardCount++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      600:   80:        for (handCount = 0; handCount < 5; handCount++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      500:   81:          memset(&G, 23, sizeof(struct gameState)); 
      500:   82:          r = initializeGame(4, k, 1, &G);
call    0 returned 100%
      500:   83:          G.deckCount[p] = deckCount;
      500:   84:          memset(G.deck[p], 0, sizeof(int) * deckCount);
      500:   85:          G.discardCount[p] = discardCount;
      500:   86:          memset(G.discard[p], 0, sizeof(int) * discardCount);
      500:   87:          G.handCount[p] = handCount;
      500:   88:          memset(G.hand[p], 0, sizeof(int) * handCount);
      500:   89:          result = checkVillage(p, &G);
call    0 returned 100%
        -:   90:
      500:   91:          if(result == 2) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3:   92:            postFailure += (result/2);
      497:   93:          }else if(result == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      497:   94:            preFailure += result;
        -:   95:          } else {
    #####:   96:            pass += (result/3);
        -:   97:          }
        -:   98:        }
        -:   99:      }
        -:  100:    }
        -:  101:  }
        1:  102:  printf("%d tests occured\n", (p*handCount*deckCount*discardCount));
call    0 returned 100%
        1:  103:  printf("%d test(s) failed where Post has more actions then Pre\n", postFailure);
call    0 returned 100%
        1:  104:  printf("%d test(s) failed where Pre has more actions then Post\n", preFailure);
call    0 returned 100%
        1:  105:  printf("%d test(s) passed where Post and Pre had equal number of actions\n", pass);
call    0 returned 100%
        -:  106:  
        1:  107:  return 0;
        -:  108:}
